{"version":3,"sources":["../../src/app/components/tieredmenu/tieredmenu.ts"],"names":["TieredMenuSub","tieredMenu","cf","renderer","this","autoZIndex","baseZIndex","Object","defineProperty","prototype","_parentActive","value","activeItem","ngAfterViewInit","root","popup","bindDocumentClickListener","onItemMouseEnter","event","item","menuitem","disabled","nextElement","children","nextElementSibling","sublist","style","zIndex","String","DomHandler","zindex","top","left","getOuterWidth","itemClick","preventDefault","url","command","originalEvent","rootItemClick","items","hide","listClick","_this","documentClickListener","documentTarget","el","nativeElement","ownerDocument","listen","parentActive","markForCheck","unbindDocumentClickListener","ngOnDestroy","Component","args","selector","template","encapsulation","ViewEncapsulation","None","Inject","forwardRef","TieredMenu","ChangeDetectorRef","Renderer2","Input","cd","showTransitionOptions","hideTransitionOptions","toggle","visible","show","preventDocumentDefault","target","currentTarget","onOverlayAnimationStart","toState","container","element","moveOnTop","appendOverlay","absolutePosition","bindDocumentResizeListener","onOverlayHide","appendTo","document","body","appendChild","restoreOverlayAppend","onWindowResize","documentResizeListener","bind","window","addEventListener","unbindDocumentResizeListener","removeEventListener","animations","trigger","transition","opacity","transform","animate","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","NgModule","imports","CommonModule","RouterModule","RippleModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,OnDestroy,Input,Renderer2,Inject,forwardRef,ChangeDetectorRef,AfterViewInit,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {trigger,style,transition,animate,AnimationEvent} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from 'primeng/dom';\nimport {MenuItem} from 'primeng/api';\nimport {RippleModule} from 'primeng/ripple';\nimport {RouterModule} from '@angular/router';\n\n@Component({\n    selector: 'p-tieredMenuSub',\n    template: `\n        <ul [ngClass]=\"{'p-submenu-list': !root}\" (click)=\"listClick($event)\" role=\"menubar\">\n            <ng-template ngFor let-child [ngForOf]=\"(root ? item : item.items)\">\n                <li *ngIf=\"child.separator\" class=\"p-menu-separator\" [ngClass]=\"{'p-hidden': child.visible === false}\" role=\"separator\">\n                <li *ngIf=\"!child.separator\" #listItem [ngClass]=\"{'p-menuitem':true,'p-menuitem-active':listItem==activeItem,'p-hidden': child.visible === false}\"\n                    [class]=\"child.styleClass\" [ngStyle]=\"child.style\" role=\"none\"\n                    (mouseenter)=\"onItemMouseEnter($event, listItem, child)\">\n                    <a *ngIf=\"!child.routerLink\" [attr.href]=\"child.url\" class=\"p-menuitem-link\" [attr.target]=\"child.target\" [attr.tabindex]=\"child.disabled ? null : '0'\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" \n                        [ngClass]=\"{'p-disabled':child.disabled}\" (click)=\"itemClick($event, listItem, child)\" role=\"menuitem\" [attr.aria-haspopup]=\"item.items != null\" [attr.aria-expanded]=\"item === activeItem\" pRipple>\n                        <span class=\"p-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"p-menuitem-text\">{{child.label}}</span>\n                        <span class=\"p-submenu-icon pi pi-angle-right\" *ngIf=\"child.items\"></span>\n                    </a>\n                    <a *ngIf=\"child.routerLink\" [routerLink]=\"child.routerLink\" role=\"menuitem\" [queryParams]=\"child.queryParams\" [routerLinkActive]=\"'p-menuitem-link-active'\" role=\"menuitem\" [attr.tabindex]=\"child.disabled ? null : '0'\"\n                        [routerLinkActiveOptions]=\"child.routerLinkActiveOptions||{exact:false}\"\n                        class=\"p-menuitem-link\" [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\"\n                        [ngClass]=\"{'p-disabled':child.disabled}\" (click)=\"itemClick($event, listItem, child)\" pRipple\n                        [fragment]=\"child.fragment\" [queryParamsHandling]=\"child.queryParamsHandling\" [preserveFragment]=\"child.preserveFragment\" [skipLocationChange]=\"child.skipLocationChange\" [replaceUrl]=\"child.replaceUrl\" [state]=\"child.state\">\n                        <span class=\"p-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"p-menuitem-text\">{{child.label}}</span>\n                        <span class=\"p-submenu-icon pi pi-angle-right\" *ngIf=\"child.items\"></span>\n                    </a>\n                    <p-tieredMenuSub [item]=\"child\" *ngIf=\"child.items\" [baseZIndex]=\"baseZIndex\" [parentActive]=\"listItem==activeItem\" [autoZIndex]=\"autoZIndex\"></p-tieredMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./tieredmenu.css']\n})\nexport class TieredMenuSub implements AfterViewInit, OnDestroy {\n\n    @Input() item: MenuItem;\n    \n    @Input() root: boolean;\n\n    @Input() autoZIndex: boolean = true;\n    \n    @Input() baseZIndex: number = 0;\n\n    @Input() get parentActive(): boolean {\n        return this._parentActive;\n    }\n    set parentActive(value) {\n        this._parentActive = value;\n\n        if (!value) {\n            this.activeItem = null;\n        }\n    }\n\n    tieredMenu: TieredMenu;\n\n    _parentActive: boolean;\n\n    rootItemClick: boolean;\n\n    documentClickListener: any;\n\n    ngAfterViewInit() {\n        if (this.root && !this.tieredMenu.popup) {\n            this.bindDocumentClickListener();\n        }\n    }\n    \n    constructor(@Inject(forwardRef(() => TieredMenu)) tieredMenu, private cf: ChangeDetectorRef, public renderer: Renderer2) {\n        this.tieredMenu = tieredMenu as TieredMenu;\n    }\n\n    activeItem: HTMLLIElement;\n\n    onItemMouseEnter(event: Event, item: HTMLLIElement, menuitem: MenuItem) {\n        if (this.tieredMenu.popup || (!this.root || this.activeItem)) {\n            if (menuitem.disabled) {\n                return;\n            }\n\n            this.activeItem = item;\n            let nextElement:  HTMLElement =  <HTMLElement> item.children[0].nextElementSibling;\n            if (nextElement) {\n                let sublist:  HTMLElement = <HTMLElement> nextElement.children[0];\n                if (this.autoZIndex) {\n                    sublist.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n                }\n                sublist.style.zIndex = String(++DomHandler.zindex);\n                            \n                sublist.style.top = '0px';\n                sublist.style.left = DomHandler.getOuterWidth(item.children[0]) + 'px';\n            }\n        }\n    }\n    \n    itemClick(event: Event, item: HTMLLIElement, menuitem: MenuItem)Â {\n        if (menuitem.disabled) {\n            event.preventDefault();\n            return true;\n        }\n        \n        if (!menuitem.url) {\n            event.preventDefault();\n        }\n        \n        if (menuitem.command) {            \n            menuitem.command({\n                originalEvent: event,\n                item: menuitem\n            });\n        }\n\n        if (this.root && !this.activeItem && !this.tieredMenu.popup ) {\n            this.activeItem = item;\n            let nextElement:  HTMLElement =  <HTMLElement> item.children[0].nextElementSibling;\n            if (nextElement) {\n                let sublist:  HTMLElement = <HTMLElement> nextElement.children[0];\n                if (this.autoZIndex) {\n                    sublist.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n                }\n                sublist.style.zIndex = String(++DomHandler.zindex);\n                            \n                sublist.style.top = '0px';\n                sublist.style.left = DomHandler.getOuterWidth(item.children[0]) + 'px';\n\n                this.rootItemClick = true;\n            }\n        }\n\n        if (!menuitem.items && this.tieredMenu.popup) {\n            this.tieredMenu.hide();\n        }\n    }\n    \n    listClick(event: Event) {\n        if (!this.rootItemClick) {\n            this.activeItem = null;\n        }\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            const documentTarget: any = this.tieredMenu && this.tieredMenu.el ? this.tieredMenu.el.nativeElement.ownerDocument : 'document';\n\n            this.documentClickListener = this.renderer.listen(documentTarget, 'click', () => {\n                if (!this.rootItemClick) {\n                    this.parentActive = false;\n                    this.activeItem = null;\n                    this.cf.markForCheck();\n                }\n\n                this.rootItemClick = false;\n            });\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.root && !this.tieredMenu.popup) {\n            this.unbindDocumentClickListener();\n        }\n    }\n}\n\n@Component({\n    selector: 'p-tieredMenu',\n    template: `\n        <div [ngClass]=\"{'p-tieredmenu p-component':true, 'p-tieredmenu-overlay':popup}\" [class]=\"styleClass\" [ngStyle]=\"style\"\n            [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" [@.disabled]=\"popup !== true\" \n            (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\" (click)=\"preventDocumentDefault=true\" *ngIf=\"!popup || visible\">\n            <p-tieredMenuSub [item]=\"model\" root=\"root\" [parentActive]=\"parentActive\" [baseZIndex]=\"baseZIndex\" [autoZIndex]=\"autoZIndex\"></p-tieredMenuSub>\n        </div>\n    `,\n    animations: [\n        trigger('overlayAnimation', [\n            transition(':enter', [\n                style({opacity: 0, transform: 'scaleY(0.8)'}),\n                animate('{{showTransitionParams}}')\n              ]),\n              transition(':leave', [\n                animate('{{hideTransitionParams}}', style({ opacity: 0 }))\n              ])\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TieredMenu implements OnDestroy {\n\n    @Input() model: MenuItem[];\n\n    @Input() popup: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n    \n    @Input() appendTo: any;\n\n    @Input() autoZIndex: boolean = true;\n    \n    @Input() baseZIndex: number = 0;\n\n    @Input() showTransitionOptions: string = '.12s cubic-bezier(0, 0, 0.2, 1)';\n\n    @Input() hideTransitionOptions: string = '.1s linear';\n\n    parentActive: boolean;\n\n    container: HTMLDivElement;\n    \n    documentClickListener: any;\n\n    documentResizeListener: any;\n    \n    preventDocumentDefault: boolean;\n\n    target: any;\n\n    visible: boolean;\n    \n    constructor(public el: ElementRef, public renderer: Renderer2, public cd: ChangeDetectorRef) {}\n    \n    toggle(event) {\n        if (this.visible)\n            this.hide();\n        else\n            this.show(event);\n\n        this.preventDocumentDefault = true;\n    }\n    \n    show(event) {\n        this.target = event.currentTarget;\n        this.visible = true;\n        this.parentActive = true;\n        this.preventDocumentDefault = true;\n        this.cd.markForCheck();\n    }\n\n    onOverlayAnimationStart(event: AnimationEvent) {\n        switch(event.toState) {\n            case 'visible':\n                if (this.popup) {\n                    this.container = event.element;\n                    this.moveOnTop();\n                    this.appendOverlay();\n                    DomHandler.absolutePosition(this.container, this.target);\n                    this.bindDocumentClickListener();\n                    this.bindDocumentResizeListener();\n                }\n            break;\n\n            case 'void':\n                this.onOverlayHide();\n            break;\n        }\n    }\n    \n    appendOverlay() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.container);\n            else\n                DomHandler.appendChild(this.container, this.appendTo);\n        }\n    }\n\n    restoreOverlayAppend() {\n        if (this.container && this.appendTo) {\n            this.el.nativeElement.appendChild(this.container);\n        }\n    }\n    \n    moveOnTop() {\n        if (this.autoZIndex) {\n            this.container.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n    }\n\n    hide() {\n        this.visible = false;\n        this.parentActive = false;\n        this.cd.markForCheck();\n    }\n\n    onWindowResize() {\n        this.hide();\n    }\n    \n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            const documentTarget: any = this.el ? this.el.nativeElement.ownerDocument : 'document';\n\n            this.documentClickListener = this.renderer.listen(documentTarget, 'click', () => {\n                if (!this.preventDocumentDefault && this.popup) {\n                    this.hide();\n                }\n\n                this.preventDocumentDefault = false;\n            });\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n    \n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    onOverlayHide() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.preventDocumentDefault = false;\n        this.target = null;\n    }\n    \n    ngOnDestroy() {\n        if (this.popup) {\n            this.restoreOverlayAppend();\n            this.onOverlayHide();\n        }\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule,RouterModule,RippleModule],\n    exports: [TieredMenu,RouterModule],\n    declarations: [TieredMenu,TieredMenuSub]\n})\nexport class TieredMenuModule { }\n"]}